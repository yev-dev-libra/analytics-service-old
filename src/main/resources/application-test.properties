server.port=9090
server.error.whitelabel.enabled=false
# ===============================
# = LOGGING
# ===============================
logging.level.root=WARN
logging.level.org.springframework.web=WARN
logging.level.org.hibernate=WARN
#logging.level.org.hibernate.SQL=DEBUG

# ===============================
# = SERVER
# ===============================
spring.application.name=analytics
server.contextPath=/analytics
server.port=8083
server.error.whitelabel.enabled=false

# ===============================
# = TESTING DATA SOURCE
# ===============================
# Set here configurations for the database connection
spring.datasource.url=jdbc:h2:mem:analytics_dev;MODE=MySQL;DB_CLOSE_DELAY=-1;INIT=CREATE SCHEMA IF NOT EXISTS analytics
spring.datasource.username=sa
spring.datasource.password=
spring.datasource.driver-class-name=org.h2.Driver
#spring.datasource.schema=classpath:sql/schema.sql
spring.datasource.data=classpath:sql/init.sql

spring.h2.console.enabled=true
spring.h2.console.path=/console

# ===============================
# = JPA / HIBERNATE
# ===============================
spring.jpa.show-sql=true
# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
# schema will be automatically created afresh for every start of application
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.show_sql=false
spring.jpa.properties.hibernate.format_sql=true
#spring.jpa.properties.hibernate.default_schema=analytics

# Naming strategy
# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
# We need to enable lazy loading
spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true


#spring.jpa.properties.javax.persistence.schema-generation.create-source=metadata
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=classpath:sql/create.sql