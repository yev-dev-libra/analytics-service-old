package com.libra.apollo.analytics.entity;

import java.math.BigDecimal;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.hibernate.annotations.Immutable;
import org.hibernate.annotations.Type;

import com.libra.apollo.analytics.entity.type.IndicatorBigDecimal;

@Entity
@Table(name = "stockindicators", schema = "apollo")
@Immutable
public class LibraStockIndicator extends AutoGeneratedId implements Comparable<LibraStockIndicator> {

	/**
	 * 
	 */
	private static final long serialVersionUID = 222263006260457523L;

	@Column(name = "instrument_id")
	private Long stockId;

	@Temporal(TemporalType.DATE)
	@Column(name = "stamp_date", nullable = false)
	private Date stampDate;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "target20d", precision = 19, scale = 4)
	private BigDecimal target20D;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "target2m", precision = 19, scale = 4)
	private BigDecimal target2M;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "fair_value", precision = 19, scale = 4)
	private BigDecimal fairValue;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "discount_to_fair_value", precision = 19, scale = 4)
	private BigDecimal discountToFairValue;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "median_discount_to_fair_value", precision = 19, scale = 4)
	private BigDecimal medianDiscountToFairValue;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "fair_value_upper", precision = 19, scale = 4)
	private BigDecimal fairValueUpper;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "fair_value_middle", precision = 19, scale = 4)
	private BigDecimal fairValueMiddle;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "fair_value_lower", precision = 19, scale = 4)
	private BigDecimal fairValueLower;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "revisions", precision = 19, scale = 4)
	private BigDecimal revisions;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "revisions1m", precision = 19, scale = 4)
	private BigDecimal revisions1M;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "revisions3m", precision = 19, scale = 4)
	private BigDecimal revisions3M;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "risk", precision = 19, scale = 4)
	private BigDecimal risk;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "skew", precision = 19, scale = 4)
	private BigDecimal skew;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "star_rating", precision = 19, scale = 4)
	private BigDecimal starRating;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "flow_driver", precision = 19, scale = 4)
	private BigDecimal flowDriver;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "price_driver", precision = 19, scale = 4)
	private BigDecimal priceDriver;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "flow", precision = 19, scale = 4)
	private BigDecimal flow;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "flow_momentum", precision = 19, scale = 4)
	private BigDecimal flowMomentum;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "sentiment", precision = 19, scale = 4)
	private BigDecimal sentiment;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "volume_avg_3m", precision = 19, scale = 4)
	private BigDecimal volumeAvg3M;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "high_price_52w", precision = 19, scale = 4)
	private BigDecimal highPrice52W;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "low_price_52w", precision = 19, scale = 4)
	private BigDecimal lowPrice52W;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "macd1", precision = 19, scale = 4)
	private BigDecimal macd1;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "macd2", precision = 19, scale = 4)
	private BigDecimal macd2;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "macd_signal", precision = 19, scale = 4)
	private BigDecimal macdSignal;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "dmi_positive", precision = 19, scale = 4)
	private BigDecimal dmiPositive;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "dmi_negative", precision = 19, scale = 4)
	private BigDecimal dmiNegative;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "cmci", precision = 19, scale = 4)
	private BigDecimal cmci;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "williams", precision = 19, scale = 4)
	private BigDecimal williams;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "rsi_14d", precision = 19, scale = 4)
	private BigDecimal rsi14D;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "stochastics_percent_k", precision = 19, scale = 4)
	private BigDecimal stochasticsPercentK;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "stochastics_percent_d", precision = 19, scale = 4)
	private BigDecimal stochasticsPercentD;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "efficiency_ratio", precision = 19, scale = 4)
	private BigDecimal efficiencyRatio;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "efficiency_ratio_sma10d", precision = 19, scale = 4)
	private BigDecimal efficiencyRatioSMA10D;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "oscillator", precision = 19, scale = 4)
	private BigDecimal oscillator;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "sma_20d", precision = 19, scale = 4)
	private BigDecimal sma20D;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "sma_50d", precision = 19, scale = 4)
	private BigDecimal sma50D;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "sma_200d", precision = 19, scale = 4)
	private BigDecimal sma200D;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "bollinger_upper", precision = 19, scale = 4)
	private BigDecimal bollingerUpper;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "bollinger_middle", precision = 19, scale = 4)
	private BigDecimal bollingerMiddle;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "bollinger_lower", precision = 19, scale = 4)
	private BigDecimal bollingerLower;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "pct_change_ytd", precision = 19, scale = 4)
	private BigDecimal pctChangeYTD;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "macd_score", precision = 19, scale = 4)
	private BigDecimal macdScore;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "dmi_score", precision = 19, scale = 4)
	private BigDecimal dmiScore;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "cmci_score", precision = 19, scale = 4)
	private BigDecimal cmciScore;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "williams_score", precision = 19, scale = 4)
	private BigDecimal williamsScore;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "rsi_score", precision = 19, scale = 4)
	private BigDecimal rsiScore;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "stochastic_score", precision = 19, scale = 4)
	private BigDecimal stochasticsScore;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "efficiency_score", precision = 19, scale = 4)
	private BigDecimal efficiencyScore;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "oscillator_score", precision = 19, scale = 4)
	private BigDecimal oscillatorScore;

	@Column(name = "fireline")
	private Integer fireline;

	@Column(name = "money_manager")
	private Integer moneyManager;

	@Column(name = "money_manager_advice", length = 255)
	private String moneyManagerAdvice; // Money Manager Advice take from old
										// LibraStockText object

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "adx", precision = 19, scale = 4)
	private BigDecimal adx;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "adr", precision = 19, scale = 4)
	private BigDecimal adr;

	@Column(name = "day_index", precision = 19, scale = 4)
	private Integer dayIndex;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "dynamic_weighting", precision = 10, scale = 4)
	private BigDecimal dynamicWeighting;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "dynamic_long_short", precision = 10, scale = 4)
	private BigDecimal dynamicLongShort;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "volume_score", precision = 10, scale = 4)
	private BigDecimal volumeScore;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "flow_score", precision = 10, scale = 4)
	private BigDecimal flowScore;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "flow_momentum_score", precision = 10, scale = 4)
	private BigDecimal flowMomentumScore;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "value_indicator_score", precision = 10, scale = 4)
	private BigDecimal valueIndicatorScore;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "dfv_score", precision = 10, scale = 4)
	private BigDecimal dfvScore;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "flow_driver_score", precision = 10, scale = 4)
	private BigDecimal flowDriverScore;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "pe_maximum", precision = 19, scale = 4)
	private BigDecimal peMaximum;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "pe_minimum", precision = 19, scale = 4)
	private BigDecimal peMinimum;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "pcf_maximum", precision = 19, scale = 4)
	private BigDecimal pcFMaximum;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "pcf_minimum", precision = 19, scale = 4)
	private BigDecimal pcFMinimum;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "pb_maximum", precision = 19, scale = 4)
	private BigDecimal pbMaximum;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "pb_minimum", precision = 19, scale = 4)
	private BigDecimal pbMinimum;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "ps_maximum", precision = 19, scale = 4)
	private BigDecimal psMaximum;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "ps_minimum", precision = 19, scale = 4)
	private BigDecimal psMinimum;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "pebitda_maximum", precision = 19, scale = 4)
	private BigDecimal pebitdaMaximum;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "pebitda_minimum", precision = 19, scale = 4)
	private BigDecimal pebitdaMinimum;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "roe_maximum", precision = 19, scale = 4)
	private BigDecimal roeMaximum;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "roe_minimum", precision = 19, scale = 4)
	private BigDecimal roeMinimum;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "eps_fy1_pct_change_1d", precision = 10, scale = 4)
	private BigDecimal epsFY1PctChange1D;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "eps_fy1_pct_change_5d", precision = 10, scale = 4)
	private BigDecimal epsFY1PctChange5D;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "eps_fy1_pct_change_1m", precision = 10, scale = 4)
	private BigDecimal epsFY1PctChange1M;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "eps_fy1_pct_change_3m", precision = 10, scale = 4)
	private BigDecimal epsFY1PctChange3M;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "lower_margin_of_safety_level", precision = 19, scale = 4)
	private BigDecimal lowerMarginOfSafetyLevel;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "upper_margin_of_safety_level", precision = 19, scale = 4)
	private BigDecimal upperMarginOfSafetyLevel;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "dynamic_short_weighting", precision = 10, scale = 4)
	private BigDecimal dynamicShortWeighting;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "fib_023", precision = 19, scale = 4)
	private BigDecimal fib023;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "fib_038", precision = 19, scale = 4)
	private BigDecimal fib038;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "fib_050", precision = 19, scale = 4)
	private BigDecimal fib050;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "fib_061", precision = 19, scale = 4)
	private BigDecimal fib061;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "fib_076", precision = 19, scale = 4)
	private BigDecimal fib076;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "daily_alpha_8w", precision = 19, scale = 4)
	private BigDecimal dailyAlpha8W;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "daily_alpha_3w", precision = 19, scale = 4)
	private BigDecimal dailyAlpha3W;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "daily_alpha_1w", precision = 19, scale = 4)
	private BigDecimal dailyAlpha1W;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "daily_alpha_1d", precision = 19, scale = 4)
	private BigDecimal dailyAlpha1D;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "intrinsic_value", precision = 19, scale = 4)
	private BigDecimal intrinsicValue;

	@Column(name = "intrinsic_value_pct")
	private Double intrinsicValuePct;

	@Column(name = "intrinsic_value_volatility")
	private Double intrinsicValueVolatility;

	@Column(name = "sweet_spot")
	private Boolean sweetSpot;

	@Column(name = "valuation_trading_flags", length = 8)
	private String valuationTradingFlags;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "target_20d_return", precision = 19, scale = 4)
	private BigDecimal target20DReturn;

	@Enumerated(EnumType.STRING)
	@Column(name = "ptps_trend")
	private TrendType ptpsTrend;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "ptps_sar", precision = 19, scale = 4)
	private BigDecimal ptpsSAR;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "ptps_af", precision = 19, scale = 4)
	private BigDecimal ptpsAF;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "base_value", precision = 19, scale = 4)
	private BigDecimal baseValue;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "stretch_value", precision = 19, scale = 4)
	private BigDecimal stretchValue;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "merger_value", precision = 19, scale = 4)
	private BigDecimal mergerValue;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "trigger_level", precision = 19, scale = 4)
	private BigDecimal triggerLevel;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "valuation_indicator", precision = 19, scale = 4)
	private BigDecimal valuationIndicator;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "valuation_indicator_10d", precision = 19, scale = 4)
	private BigDecimal valuationIndicator10D;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "long_term_pessimistic", precision = 19, scale = 4)
	private BigDecimal longTermPessimistic;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "long_term_neutral", precision = 19, scale = 4)
	private BigDecimal longTermNeutral;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "long_term_optimistic", precision = 19, scale = 4)
	private BigDecimal longTermOptimistic;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "estimates_fy1", precision = 19, scale = 4)
	private BigDecimal estimatesFy1;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "estimates_fy2", precision = 19, scale = 4)
	private BigDecimal estimatesFy2;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "eps_trend", precision = 19, scale = 4)
	private BigDecimal epsTrend;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "long_term_pb_forecast", precision = 19, scale = 4)
	private BigDecimal longTermPBForecast;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "long_term_pcf_forecast", precision = 19, scale = 4)
	private BigDecimal longTermPCFForecast;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "long_term_pebitda_forecast", precision = 19, scale = 4)
	private BigDecimal longTermPEBITDAForecast;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "long_term_pe_forecast", precision = 19, scale = 4)
	private BigDecimal longTermPEForecast;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "long_term_ps_forecast", precision = 19, scale = 4)
	private BigDecimal longTermPSForecast;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "long_term_value", precision = 19, scale = 4)
	private BigDecimal longTermValue;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "pb_driver", precision = 19, scale = 4)
	private BigDecimal pbDriver;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "pb_lower", precision = 19, scale = 4)
	private BigDecimal pbLower;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "pb_upper", precision = 19, scale = 4)
	private BigDecimal pbUpper;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "pb_value", precision = 19, scale = 4)
	private BigDecimal pbValue;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "pb_second_order", precision = 19, scale = 4)
	private BigDecimal pbSecondOrder;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "pb_third_order", precision = 19, scale = 4)
	private BigDecimal pbThirdOrder;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "pb_tpm", precision = 19, scale = 4)
	private BigDecimal pbtpm;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "pcf_driver", precision = 19, scale = 4)
	private BigDecimal pcfDriver;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "pcf_lower", precision = 19, scale = 4)
	private BigDecimal pcfLower;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "pcf_upper", precision = 19, scale = 4)
	private BigDecimal pcfUpper;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "pcf_value", precision = 19, scale = 4)
	private BigDecimal pcfValue;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "pcf_second_order", precision = 19, scale = 4)
	private BigDecimal pcfSecondOrder;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "pcf_third_order", precision = 19, scale = 4)
	private BigDecimal pcfThirdOrder;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "pcf_tpm", precision = 19, scale = 4)
	private BigDecimal pcftpm;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "pebitda_driver", precision = 19, scale = 4)
	private BigDecimal pebitdaDriver;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "pebitda_lower", precision = 19, scale = 4)
	private BigDecimal pebitdaLower;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "pebitda_upper", precision = 19, scale = 4)
	private BigDecimal pebitdaUpper;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "pebitda_value", precision = 19, scale = 4)
	private BigDecimal pebitdaValue;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "pebitda_second_order", precision = 19, scale = 4)
	private BigDecimal pebitdaSecondOrder;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "pebitda_third_order", precision = 19, scale = 4)
	private BigDecimal pebitdaThirdOrder;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "pebitda_tpm", precision = 19, scale = 4)
	private BigDecimal pebitdatpm;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "pe_driver", precision = 19, scale = 4)
	private BigDecimal peDriver;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "pe_lower", precision = 19, scale = 4)
	private BigDecimal peLower;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "pe_upper", precision = 19, scale = 4)
	private BigDecimal peUpper;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "pe_value", precision = 19, scale = 4)
	private BigDecimal peValue;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "pe_second_order", precision = 19, scale = 4)
	private BigDecimal peSecondOrder;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "pe_third_order", precision = 19, scale = 4)
	private BigDecimal peThirdOrder;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "pe_tpm", precision = 19, scale = 4)
	private BigDecimal petpm;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "ps_driver", precision = 19, scale = 4)
	private BigDecimal psDriver;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "ps_lower", precision = 19, scale = 4)
	private BigDecimal psLower;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "ps_upper", precision = 19, scale = 4)
	private BigDecimal psUpper;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "ps_value", precision = 19, scale = 4)
	private BigDecimal psValue;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "ps_second_order", precision = 19, scale = 4)
	private BigDecimal psSecondOrder;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "ps_third_order", precision = 19, scale = 4)
	private BigDecimal psThirdOrder;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "ps_tpm", precision = 19, scale = 4)
	private BigDecimal pstpm;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "dm_score_bookvalue", precision = 19, scale = 4)
	private BigDecimal dmScoreBookvalue;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "dm_score_earnings", precision = 19, scale = 4)
	private BigDecimal dmScoreEarnings;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "dm_score_cashflow", precision = 19, scale = 4)
	private BigDecimal dmScoreCashflow;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "dm_score_sales", precision = 19, scale = 4)
	private BigDecimal dmScoreSales;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "dm_score_ebitda", precision = 19, scale = 4)
	private BigDecimal dmScoreEbitda;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "intrinsic_value_slope", precision = 19, scale = 4)
	private BigDecimal intrinsicValueSlope;

	@Column(name = "intrinsic_value_slope_signal")
	private Boolean intrinsicValueSlopeSignal;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "fair_value_slope", precision = 19, scale = 4)
	private BigDecimal fairValueSlope;

	@Column(name = "fair_value_range_flag")
	private Boolean fairValueRangeFlag;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "intrinsic_value_rsq", precision = 19, scale = 4)
	private BigDecimal intrinsicValueRsq;

	@Column(name = "cvi_fv_flag")
	private Boolean cviFvFlag;

	@Column(name = "cvi_iv_flag")
	private Boolean cviIvFlag;

	@Column(name = "cvi_buy_signal")
	private Boolean cviBuySignal;

	@Column(name = "cvi_close_signal")
	private Boolean cviCloseSignal;

	@Column(name = "cvi_short_signal")
	private Boolean cviShortSignal;

	@Column(name = "cvi_cover_signal")
	private Boolean cviCoverSignal;

	@Column(name = "cvi_buy_count")
	private Integer cviBuyCount;

	@Column(name = "cvi_close_count")
	private Integer cviCloseCount;

	@Column(name = "cvi_short_count")
	private Integer cviShortCount;

	@Column(name = "cvi_cover_count")
	private Integer cviCoverCount;

	@Column(name = "fractional_buy")
	private Boolean fractionalBuy;

	@Column(name = "fractional_sell")
	private Boolean fractionalSell;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "cvi_range_upside", precision = 19, scale = 4)
	private BigDecimal cviRangeUpside;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "cvi_range_downside", precision = 19, scale = 4)
	private BigDecimal cviRangeDownside;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "cvi", precision = 19, scale = 4)
	private BigDecimal cvi;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "apollo_alpha", precision = 19, scale = 4)
	private BigDecimal apolloAlpha;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "stock_index_beta", precision = 19, scale = 4)
	private BigDecimal stockIndexBeta;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "range_exp_20d_plus", precision = 19, scale = 4)
	private BigDecimal rangeExp20dPlus;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "range_exp_20d_minus", precision = 19, scale = 4)
	private BigDecimal rangeExp20dMinus;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "last_20d_performance", precision = 19, scale = 4)
	private BigDecimal last20dPerformance;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "fair_value_projection", precision = 19, scale = 4)
	private BigDecimal fairValueProjection;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "intrinsic_value_projection", precision = 19, scale = 4)
	private BigDecimal intrinsicValueProjection;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "new_target", precision = 19, scale = 4)
	private BigDecimal newTarget;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "new_target_return", precision = 19, scale = 4)
	private BigDecimal newTargetReturn;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "conditional_direction_forecast", precision = 19, scale = 4)
	private BigDecimal conditionalDirectionForecast;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "move_to_fair_value_projection", precision = 19, scale = 4)
	private BigDecimal moveToFairValueProjection;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "move_to_intrinsic_value_projection", precision = 19, scale = 4)
	private BigDecimal moveToIntrinsicValueProjection;

	@Column(name = "fair_value_range_limits")
	private Boolean fairValueRangeLimits;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "green_iv_projection", precision = 19, scale = 4)
	private BigDecimal greenIvProjection;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "green_cvi", precision = 19, scale = 4)
	private BigDecimal greenCvi;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "green_fv_projection", precision = 19, scale = 4)
	private BigDecimal greenFvProjection;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "green_forecast_return", precision = 19, scale = 4)
	private BigDecimal greenForecastReturn;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "green_alpha_beta", precision = 19, scale = 4)
	private BigDecimal greenAlphaBeta;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "green_iv_slope", precision = 19, scale = 4)
	private BigDecimal greenIvSlope;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "green_momentum", precision = 19, scale = 4)
	private BigDecimal greenMomentum;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "green_extreme_filter", precision = 19, scale = 4)
	private BigDecimal greenExtremeFilter;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "green_range_limit", precision = 19, scale = 4)
	private BigDecimal greenRangeLimit;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "green_iv_pct_score", precision = 19, scale = 4)
	private BigDecimal greenIvPctScore;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "green_volatility_score", precision = 19, scale = 4)
	private BigDecimal greenVolatilityScore;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "red_iv_projection", precision = 19, scale = 4)
	private BigDecimal redIvProjection;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "red_cvi", precision = 19, scale = 4)
	private BigDecimal redCvi;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "red_fv_projection", precision = 19, scale = 4)
	private BigDecimal redFvProjection;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "red_forecast_return", precision = 19, scale = 4)
	private BigDecimal redForecastReturn;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "red_alpha_beta", precision = 19, scale = 4)
	private BigDecimal redAlphaBeta;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "red_iv_slope", precision = 19, scale = 4)
	private BigDecimal redIvSlope;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "red_momentum", precision = 19, scale = 4)
	private BigDecimal redMomentum;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "red_extreme_filter", precision = 19, scale = 4)
	private BigDecimal redExtremeFilter;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "red_range_limit", precision = 19, scale = 4)
	private BigDecimal redRangeLimit;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "red_iv_pct_score", precision = 19, scale = 4)
	private BigDecimal redIvPctScore;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "red_volatility_score", precision = 19, scale = 4)
	private BigDecimal redVolatilityScore;

	//-------- New indicators for Analytics ------------//
	
	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "price_change_1m", precision = 19, scale = 4)
	private BigDecimal priceChange1m;
	
	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "discount_premium_to_fair_value", precision = 19, scale = 4)
	private BigDecimal discountPremiumToFairValue;

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "net_discount_median_fair_value", precision = 19, scale = 4)
	private BigDecimal netDiscountMedianFairValue;
	
	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "fair_value_change_1m", precision = 19, scale = 4)
	private BigDecimal fairValueChange1m;
	
	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "expected_return_2m", precision = 19, scale = 4)
	private BigDecimal expectedReturn2m;
	
	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "discount_premium_to_intrinsic_value", precision = 19, scale = 4)
	private BigDecimal discountPremiumToIntrinsicValue;
	
	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "intrinsic_value_change_3m", precision = 19, scale = 4)
	private BigDecimal intrinsicValueChange3m;
	
	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "fair_value_change_3m", precision = 19, scale = 4)
	private BigDecimal fairValueChange3m;
	
	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "intrinsic_value_change_1m", precision = 19, scale = 4)
	private BigDecimal intrinsicValueChange1m;
	
	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "pct_in_fair_value_range", precision = 19, scale = 4)
	private BigDecimal pctInFairValueRange;

	public BigDecimal getTarget20D() {
		return target20D;
	}

	public void setTarget20D(final BigDecimal target20d) {
		target20D = target20d;
	}

	public BigDecimal getTarget2M() {
		return target2M;
	}

	public void setTarget2M(final BigDecimal target2m) {
		target2M = target2m;
	}

	public BigDecimal getFairValue() {
		return fairValue;
	}

	public void setFairValue(final BigDecimal fairValue) {
		this.fairValue = fairValue;
	}

	public BigDecimal getDiscountToFairValue() {
		return discountToFairValue;
	}

	public void setDiscountToFairValue(final BigDecimal discountToFairValue) {
		this.discountToFairValue = discountToFairValue;
	}

	public BigDecimal getMedianDiscountToFairValue() {
		return medianDiscountToFairValue;
	}

	public void setMedianDiscountToFairValue(final BigDecimal medianDiscountToFairValue) {
		this.medianDiscountToFairValue = medianDiscountToFairValue;
	}

	public BigDecimal getFairValueUpper() {
		return fairValueUpper;
	}

	public void setFairValueUpper(final BigDecimal fairValueUpper) {
		this.fairValueUpper = fairValueUpper;
	}

	public BigDecimal getFairValueMiddle() {
		return fairValueMiddle;
	}

	public void setFairValueMiddle(final BigDecimal fairValueMiddle) {
		this.fairValueMiddle = fairValueMiddle;
	}

	public BigDecimal getFairValueLower() {
		return fairValueLower;
	}

	public void setFairValueLower(final BigDecimal fairValueLower) {
		this.fairValueLower = fairValueLower;
	}

	public BigDecimal getRevisions() {
		return revisions;
	}

	public void setRevisions(final BigDecimal latestRevision) {
		this.revisions = latestRevision;
	}

	public BigDecimal getRevisions1M() {
		return revisions1M;
	}

	public void setRevisions1M(final BigDecimal revisions1m) {
		revisions1M = revisions1m;
	}

	public BigDecimal getRevisions3M() {
		return revisions3M;
	}

	public void setRevisions3M(final BigDecimal revisions3m) {
		revisions3M = revisions3m;
	}

	public BigDecimal getRisk() {
		return risk;
	}

	public void setRisk(final BigDecimal risk) {
		this.risk = risk;
	}

	@Type(type = IndicatorBigDecimal.HIBERNATE_TYPE_NAME)
	@Column(name = "skew", precision = 19, scale = 4)
	public BigDecimal getSkew() {
		return skew;
	}

	public void setSkew(final BigDecimal skew) {
		this.skew = skew;
	}

	public BigDecimal getStarRating() {
		return starRating;
	}

	public void setStarRating(final BigDecimal starRating) {
		this.starRating = starRating;
	}

	public BigDecimal getFlowDriver() {
		return flowDriver;
	}

	public void setFlowDriver(final BigDecimal flowDriver) {
		this.flowDriver = flowDriver;
	}

	public BigDecimal getPriceDriver() {
		return priceDriver;
	}

	public void setPriceDriver(final BigDecimal priceDriver) {
		this.priceDriver = priceDriver;
	}

	public BigDecimal getFlow() {
		return flow;
	}

	public void setFlow(final BigDecimal flow) {
		this.flow = flow;
	}

	public BigDecimal getFlowMomentum() {
		return flowMomentum;
	}

	public void setFlowMomentum(final BigDecimal flowMomentum) {
		this.flowMomentum = flowMomentum;
	}

	public BigDecimal getSentiment() {
		return sentiment;
	}

	public void setSentiment(final BigDecimal sentiment) {
		this.sentiment = sentiment;
	}

	public BigDecimal getVolumeAvg3M() {
		return volumeAvg3M;
	}

	public void setVolumeAvg3M(final BigDecimal volumeAvg3M) {
		this.volumeAvg3M = volumeAvg3M;
	}

	public BigDecimal getHighPrice52W() {
		return highPrice52W;
	}

	public void setHighPrice52W(final BigDecimal highPrice52W) {
		this.highPrice52W = highPrice52W;
	}

	public BigDecimal getLowPrice52W() {
		return lowPrice52W;
	}

	public void setLowPrice52W(final BigDecimal lowPrice52W) {
		this.lowPrice52W = lowPrice52W;
	}

	public BigDecimal getMacd1() {
		return macd1;
	}

	public void setMacd1(final BigDecimal macd1) {
		this.macd1 = macd1;
	}

	public BigDecimal getMacd2() {
		return macd2;
	}

	public void setMacd2(final BigDecimal macd2) {
		this.macd2 = macd2;
	}

	public BigDecimal getMacdSignal() {
		return macdSignal;
	}

	public void setMacdSignal(final BigDecimal macdSignal) {
		this.macdSignal = macdSignal;
	}

	public BigDecimal getDmiPositive() {
		return dmiPositive;
	}

	public void setDmiPositive(final BigDecimal dmiPositive) {
		this.dmiPositive = dmiPositive;
	}

	public BigDecimal getDmiNegative() {
		return dmiNegative;
	}

	public void setDmiNegative(final BigDecimal dmiNegative) {
		this.dmiNegative = dmiNegative;
	}

	public BigDecimal getCmci() {
		return cmci;
	}

	public void setCmci(final BigDecimal cmci) {
		this.cmci = cmci;
	}

	public BigDecimal getWilliams() {
		return williams;
	}

	public void setWilliams(final BigDecimal williams) {
		this.williams = williams;
	}

	public BigDecimal getRsi14D() {
		return rsi14D;
	}

	public void setRsi14D(final BigDecimal rsi14d) {
		rsi14D = rsi14d;
	}

	public BigDecimal getStochasticsPercentK() {
		return stochasticsPercentK;
	}

	public void setStochasticsPercentK(final BigDecimal stochasticsPercentK) {
		this.stochasticsPercentK = stochasticsPercentK;
	}

	public BigDecimal getStochasticsPercentD() {
		return stochasticsPercentD;
	}

	public void setStochasticsPercentD(final BigDecimal stochasticsPercentD) {
		this.stochasticsPercentD = stochasticsPercentD;
	}

	public BigDecimal getEfficiencyRatio() {
		return efficiencyRatio;
	}

	public void setEfficiencyRatio(final BigDecimal efficiencyRatio) {
		this.efficiencyRatio = efficiencyRatio;
	}

	public BigDecimal getEfficiencyRatioSMA10D() {
		return efficiencyRatioSMA10D;
	}

	public void setEfficiencyRatioSMA10D(final BigDecimal efficiencyRatioSMA10D) {
		this.efficiencyRatioSMA10D = efficiencyRatioSMA10D;
	}

	public BigDecimal getOscillator() {
		return oscillator;
	}

	public void setOscillator(final BigDecimal oscillator) {
		this.oscillator = oscillator;
	}

	public BigDecimal getSma20D() {
		return sma20D;
	}

	public void setSma20D(final BigDecimal sma20d) {
		sma20D = sma20d;
	}

	public BigDecimal getSma50D() {
		return sma50D;
	}

	public void setSma50D(final BigDecimal sma50d) {
		sma50D = sma50d;
	}

	public BigDecimal getSma200D() {
		return sma200D;
	}

	public void setSma200D(final BigDecimal sma200d) {
		sma200D = sma200d;
	}

	public BigDecimal getBollingerUpper() {
		return bollingerUpper;
	}

	public void setBollingerUpper(final BigDecimal bollingerUpper) {
		this.bollingerUpper = bollingerUpper;
	}

	public BigDecimal getBollingerMiddle() {
		return bollingerMiddle;
	}

	public void setBollingerMiddle(final BigDecimal bollingerMiddle) {
		this.bollingerMiddle = bollingerMiddle;
	}

	public BigDecimal getBollingerLower() {
		return bollingerLower;
	}

	public void setBollingerLower(final BigDecimal bollingerLower) {
		this.bollingerLower = bollingerLower;
	}

	public BigDecimal getPctChangeYTD() {
		return pctChangeYTD;
	}

	public void setPctChangeYTD(final BigDecimal pctChangeYTD) {
		this.pctChangeYTD = pctChangeYTD;
	}

	public BigDecimal getMacdScore() {
		return macdScore;
	}

	public void setMacdScore(final BigDecimal macdScore) {
		this.macdScore = macdScore;
	}

	public BigDecimal getDmiScore() {
		return dmiScore;
	}

	public void setDmiScore(final BigDecimal dmiScore) {
		this.dmiScore = dmiScore;
	}

	public BigDecimal getCmciScore() {
		return cmciScore;
	}

	public void setCmciScore(final BigDecimal cmciScore) {
		this.cmciScore = cmciScore;
	}

	public BigDecimal getWilliamsScore() {
		return williamsScore;
	}

	public void setWilliamsScore(final BigDecimal williamsScore) {
		this.williamsScore = williamsScore;
	}

	public BigDecimal getRsiScore() {
		return rsiScore;
	}

	public void setRsiScore(final BigDecimal rsiScore) {
		this.rsiScore = rsiScore;
	}

	public BigDecimal getStochasticsScore() {
		return stochasticsScore;
	}

	public void setStochasticsScore(final BigDecimal stochasticsScore) {
		this.stochasticsScore = stochasticsScore;
	}

	public BigDecimal getEfficiencyScore() {
		return efficiencyScore;
	}

	public void setEfficiencyScore(final BigDecimal efficiencyScore) {
		this.efficiencyScore = efficiencyScore;
	}

	public BigDecimal getOscillatorScore() {
		return oscillatorScore;
	}

	public void setOscillatorScore(final BigDecimal oscillatorScore) {
		this.oscillatorScore = oscillatorScore;
	}

	public Integer getFireline() {
		return fireline;
	}

	public void setFireline(final Integer fireline) {
		this.fireline = fireline;
	}

	public Integer getMoneyManager() {
		return moneyManager;
	}

	public void setMoneyManager(final Integer moneyManager) {
		this.moneyManager = moneyManager;
	}

	public String getMoneyManagerAdvice() {
		return moneyManagerAdvice;
	}

	public void setMoneyManagerAdvice(final String moneyManagerAdvice) {
		this.moneyManagerAdvice = moneyManagerAdvice;
	}

	public BigDecimal getAdx() {
		return adx;
	}

	public void setAdx(final BigDecimal adx) {
		this.adx = adx;
	}

	public BigDecimal getAdr() {
		return adr;
	}

	public void setAdr(final BigDecimal adr) {
		this.adr = adr;
	}

	public Integer getDayIndex() {
		return dayIndex;
	}

	public void setDayIndex(final Integer dayIndex) {
		this.dayIndex = dayIndex;
	}

	public BigDecimal getDynamicWeighting() {
		return dynamicWeighting;
	}

	public void setDynamicWeighting(final BigDecimal dynamicWeighting) {
		this.dynamicWeighting = dynamicWeighting;
	}

	public BigDecimal getDynamicLongShort() {
		return dynamicLongShort;
	}

	public void setDynamicLongShort(final BigDecimal dynamicLongShort) {
		this.dynamicLongShort = dynamicLongShort;
	}

	public BigDecimal getVolumeScore() {
		return volumeScore;
	}

	public void setVolumeScore(final BigDecimal volumeScore) {
		this.volumeScore = volumeScore;
	}

	public BigDecimal getFlowScore() {
		return flowScore;
	}

	public void setFlowScore(final BigDecimal flowScore) {
		this.flowScore = flowScore;
	}

	public BigDecimal getFlowMomentumScore() {
		return flowMomentumScore;
	}

	public void setFlowMomentumScore(final BigDecimal flowMomentumScore) {
		this.flowMomentumScore = flowMomentumScore;
	}

	public BigDecimal getValueIndicatorScore() {
		return valueIndicatorScore;
	}

	public void setValueIndicatorScore(final BigDecimal valueIndicatorScore) {
		this.valueIndicatorScore = valueIndicatorScore;
	}

	public BigDecimal getDfvScore() {
		return dfvScore;
	}

	public void setDfvScore(final BigDecimal dfvScore) {
		this.dfvScore = dfvScore;
	}

	public BigDecimal getFlowDriverScore() {
		return flowDriverScore;
	}

	public void setFlowDriverScore(final BigDecimal flowDriverScore) {
		this.flowDriverScore = flowDriverScore;
	}

	public BigDecimal getPeMaximum() {
		return peMaximum;
	}

	public void setPeMaximum(final BigDecimal peMaximum) {
		this.peMaximum = peMaximum;
	}

	public BigDecimal getPeMinimum() {
		return peMinimum;
	}

	public void setPeMinimum(final BigDecimal peMinimum) {
		this.peMinimum = peMinimum;
	}

	public BigDecimal getPcFMaximum() {
		return pcFMaximum;
	}

	public void setPcFMaximum(final BigDecimal pcFMaximum) {
		this.pcFMaximum = pcFMaximum;
	}

	public BigDecimal getPcFMinimum() {
		return pcFMinimum;
	}

	public void setPcFMinimum(final BigDecimal pcFMinimum) {
		this.pcFMinimum = pcFMinimum;
	}

	public BigDecimal getPbMaximum() {
		return pbMaximum;
	}

	public void setPbMaximum(final BigDecimal pbMaximum) {
		this.pbMaximum = pbMaximum;
	}

	public BigDecimal getPbMinimum() {
		return pbMinimum;
	}

	public void setPbMinimum(final BigDecimal pbMinimum) {
		this.pbMinimum = pbMinimum;
	}

	public BigDecimal getPsMaximum() {
		return psMaximum;
	}

	public void setPsMaximum(final BigDecimal psMaximum) {
		this.psMaximum = psMaximum;
	}

	public BigDecimal getPsMinimum() {
		return psMinimum;
	}

	public void setPsMinimum(final BigDecimal psMinimum) {
		this.psMinimum = psMinimum;
	}

	public BigDecimal getPebitdaMaximum() {
		return pebitdaMaximum;
	}

	public void setPebitdaMaximum(final BigDecimal pebitdaMaximum) {
		this.pebitdaMaximum = pebitdaMaximum;
	}

	public BigDecimal getPebitdaMinimum() {
		return pebitdaMinimum;
	}

	public void setPebitdaMinimum(final BigDecimal pebitdaMinimum) {
		this.pebitdaMinimum = pebitdaMinimum;
	}

	public BigDecimal getRoeMaximum() {
		return roeMaximum;
	}

	public void setRoeMaximum(final BigDecimal roeMaximum) {
		this.roeMaximum = roeMaximum;
	}

	public BigDecimal getRoeMinimum() {
		return roeMinimum;
	}

	public void setRoeMinimum(final BigDecimal roeMinimum) {
		this.roeMinimum = roeMinimum;
	}

	public BigDecimal getEpsFY1PctChange1D() {
		return epsFY1PctChange1D;
	}

	public void setEpsFY1PctChange1D(final BigDecimal epsFY1PctChange1D) {
		this.epsFY1PctChange1D = epsFY1PctChange1D;
	}

	public BigDecimal getEpsFY1PctChange5D() {
		return epsFY1PctChange5D;
	}

	public void setEpsFY1PctChange5D(final BigDecimal epsFY1PctChange5D) {
		this.epsFY1PctChange5D = epsFY1PctChange5D;
	}

	public BigDecimal getEpsFY1PctChange1M() {
		return epsFY1PctChange1M;
	}

	public void setEpsFY1PctChange1M(final BigDecimal epsFY1PctChange1M) {
		this.epsFY1PctChange1M = epsFY1PctChange1M;
	}

	public BigDecimal getEpsFY1PctChange3M() {
		return epsFY1PctChange3M;
	}

	public void setEpsFY1PctChange3M(final BigDecimal epsFY1PctChange3M) {
		this.epsFY1PctChange3M = epsFY1PctChange3M;
	}

	public BigDecimal getLowerMarginOfSafetyLevel() {
		return lowerMarginOfSafetyLevel;
	}

	public void setLowerMarginOfSafetyLevel(final BigDecimal lowerMarginOfSafetyLevel) {
		this.lowerMarginOfSafetyLevel = lowerMarginOfSafetyLevel;
	}

	public BigDecimal getUpperMarginOfSafetyLevel() {
		return upperMarginOfSafetyLevel;
	}

	public void setUpperMarginOfSafetyLevel(final BigDecimal upperMarginOfSafetyLevel) {
		this.upperMarginOfSafetyLevel = upperMarginOfSafetyLevel;
	}

	public BigDecimal getDynamicShortWeighting() {
		return dynamicShortWeighting;
	}

	public void setDynamicShortWeighting(final BigDecimal dynamicShortWeighting) {
		this.dynamicShortWeighting = dynamicShortWeighting;
	}

	public BigDecimal getFib023() {
		return fib023;
	}

	public void setFib023(final BigDecimal fib023) {
		this.fib023 = fib023;
	}

	public BigDecimal getFib038() {
		return fib038;
	}

	public void setFib038(final BigDecimal fib038) {
		this.fib038 = fib038;
	}

	public BigDecimal getFib050() {
		return fib050;
	}

	public void setFib050(final BigDecimal fib050) {
		this.fib050 = fib050;
	}

	public BigDecimal getFib061() {
		return fib061;
	}

	public void setFib061(final BigDecimal fib061) {
		this.fib061 = fib061;
	}

	public BigDecimal getFib076() {
		return fib076;
	}

	public void setFib076(final BigDecimal fib076) {
		this.fib076 = fib076;
	}

	public BigDecimal getDailyAlpha8W() {
		return dailyAlpha8W;
	}

	public void setDailyAlpha8W(final BigDecimal dailyAlpha8W) {
		this.dailyAlpha8W = dailyAlpha8W;
	}

	public BigDecimal getDailyAlpha3W() {
		return dailyAlpha3W;
	}

	public void setDailyAlpha3W(final BigDecimal dailyAlpha3W) {
		this.dailyAlpha3W = dailyAlpha3W;
	}

	public BigDecimal getDailyAlpha1W() {
		return dailyAlpha1W;
	}

	public void setDailyAlpha1W(final BigDecimal dailyAlpha1W) {
		this.dailyAlpha1W = dailyAlpha1W;
	}

	public BigDecimal getDailyAlpha1D() {
		return dailyAlpha1D;
	}

	public void setDailyAlpha1D(final BigDecimal dailyAlpha1D) {
		this.dailyAlpha1D = dailyAlpha1D;
	}

	public BigDecimal getIntrinsicValue() {
		return intrinsicValue;
	}

	public void setIntrinsicValue(final BigDecimal intrinsicValue) {
		this.intrinsicValue = intrinsicValue;
	}

	public Double getIntrinsicValuePct() {
		return intrinsicValuePct;
	}

	public void setIntrinsicValuePct(final Double intrinsicValuePct) {
		this.intrinsicValuePct = intrinsicValuePct;
	}

	public Double getIntrinsicValueVolatility() {
		return intrinsicValueVolatility;
	}

	public void setIntrinsicValueVolatility(final Double intrinsicValueVolatility) {
		this.intrinsicValueVolatility = intrinsicValueVolatility;
	}

	public Boolean getSweetSpot() {
		return sweetSpot;
	}

	public void setSweetSpot(final Boolean sweetSpot) {
		this.sweetSpot = sweetSpot;
	}

	public String getValuationTradingFlags() {
		return valuationTradingFlags;
	}

	public void setValuationTradingFlags(final String valuationTradingFlags) {
		this.valuationTradingFlags = valuationTradingFlags;
	}

	public BigDecimal getTarget20DReturn() {
		return target20DReturn;
	}

	public void setTarget20DReturn(final BigDecimal target20dReturn) {
		target20DReturn = target20dReturn;
	}

	public TrendType getPtpsTrend() {
		return ptpsTrend;
	}

	/**
	 * @param ptpsTrend
	 *            the ptpsTrend to set
	 */
	public void setPtpsTrend(final TrendType ptpsTrend) {
		this.ptpsTrend = ptpsTrend;
	}

	/**
	 * @return the ptpsSAR
	 */

	public BigDecimal getPtpsSAR() {
		return ptpsSAR;
	}

	/**
	 * @param ptpsSAR
	 *            the ptpsSAR to set
	 */
	public void setPtpsSAR(final BigDecimal ptpsSAR) {
		this.ptpsSAR = ptpsSAR;
	}

	/**
	 * @return the ptpsAF
	 */

	public BigDecimal getPtpsAF() {
		return ptpsAF;
	}

	/**
	 * @param ptpsAF
	 *            the ptpsAF to set
	 */
	public void setPtpsAF(final BigDecimal ptpsAF) {
		this.ptpsAF = ptpsAF;
	}

	/**
	 * @return the baseValue
	 */
	public BigDecimal getBaseValue() {
		return baseValue;
	}

	/**
	 * @param baseValue
	 *            the baseValue to set
	 */
	public void setBaseValue(final BigDecimal baseValue) {
		this.baseValue = baseValue;
	}

	/**
	 * @return the stretchValue
	 */

	public BigDecimal getStretchValue() {
		return stretchValue;
	}

	/**
	 * @param stretchValue
	 *            the stretchValue to set
	 */
	public void setStretchValue(final BigDecimal stretchValue) {
		this.stretchValue = stretchValue;
	}

	/**
	 * @return the longTermPessimistic
	 */
	public BigDecimal getLongTermPessimistic() {
		return longTermPessimistic;
	}

	/**
	 * @param longTermPessimistic
	 *            the longTermPessimistic to set
	 */
	public void setLongTermPessimistic(final BigDecimal longTermPessimistic) {
		this.longTermPessimistic = longTermPessimistic;
	}

	/**
	 * @return the longTermNeutral
	 */

	public BigDecimal getLongTermNeutral() {
		return longTermNeutral;
	}

	/**
	 * @param longTermNeutral
	 *            the longTermNeutral to set
	 */
	public void setLongTermNeutral(final BigDecimal longTermNeutral) {
		this.longTermNeutral = longTermNeutral;
	}

	/**
	 * @return the longTermOptimistic
	 */
	public BigDecimal getLongTermOptimistic() {
		return longTermOptimistic;
	}

	/**
	 * @param longTermOptimistic
	 *            the longTermOptimistic to set
	 */
	public void setLongTermOptimistic(final BigDecimal longTermOptimistic) {
		this.longTermOptimistic = longTermOptimistic;
	}

	/**
	 * @return the longTermValue
	 */
	public BigDecimal getLongTermValue() {
		return longTermValue;
	}

	/**
	 * @param longTermTarget
	 *            the longTermTarget to set
	 */
	public void setLongTermValue(final BigDecimal longTermValue) {
		this.longTermValue = longTermValue;
	}

	public BigDecimal getEpsTrend() {
		return epsTrend;
	}

	public void setEpsTrend(final BigDecimal epsTrend) {
		this.epsTrend = epsTrend;
	}

	public BigDecimal getLongTermPBForecast() {
		return longTermPBForecast;
	}

	public void setLongTermPBForecast(final BigDecimal longTermPBForecast) {
		this.longTermPBForecast = longTermPBForecast;
	}

	public BigDecimal getLongTermPCFForecast() {
		return longTermPCFForecast;
	}

	public void setLongTermPCFForecast(final BigDecimal longTermPCFForecast) {
		this.longTermPCFForecast = longTermPCFForecast;
	}

	public BigDecimal getLongTermPEBITDAForecast() {
		return longTermPEBITDAForecast;
	}

	public void setLongTermPEBITDAForecast(final BigDecimal longTermPEBITDAForecast) {
		this.longTermPEBITDAForecast = longTermPEBITDAForecast;
	}

	public BigDecimal getLongTermPEForecast() {
		return longTermPEForecast;
	}

	public void setLongTermPEForecast(final BigDecimal longTermPEForecast) {
		this.longTermPEForecast = longTermPEForecast;
	}

	public BigDecimal getLongTermPSForecast() {
		return longTermPSForecast;
	}

	public void setLongTermPSForecast(final BigDecimal longTermPSForecast) {
		this.longTermPSForecast = longTermPSForecast;
	}

	public BigDecimal getMergerValue() {
		return mergerValue;
	}

	public void setMergerValue(final BigDecimal mergerValue) {
		this.mergerValue = mergerValue;
	}

	public BigDecimal getPbDriver() {
		return pbDriver;
	}

	public void setPbDriver(final BigDecimal pbDriver) {
		this.pbDriver = pbDriver;
	}

	public BigDecimal getPbLower() {
		return pbLower;
	}

	public void setPbLower(final BigDecimal pbLower) {
		this.pbLower = pbLower;
	}

	public BigDecimal getPbUpper() {
		return pbUpper;
	}

	public void setPbUpper(final BigDecimal pbUpper) {
		this.pbUpper = pbUpper;
	}

	public BigDecimal getPbValue() {
		return pbValue;
	}

	public void setPbValue(final BigDecimal pbValue) {
		this.pbValue = pbValue;
	}

	public BigDecimal getPbSecondOrder() {
		return pbSecondOrder;
	}

	public void setPbSecondOrder(final BigDecimal pbSecondOrder) {
		this.pbSecondOrder = pbSecondOrder;
	}

	public BigDecimal getPbThirdOrder() {
		return pbThirdOrder;
	}

	public void setPbThirdOrder(final BigDecimal pbThirdOrder) {
		this.pbThirdOrder = pbThirdOrder;
	}

	public BigDecimal getPbtpm() {
		return pbtpm;
	}

	public void setPbtpm(final BigDecimal pbtpm) {
		this.pbtpm = pbtpm;
	}

	public BigDecimal getPcfDriver() {
		return pcfDriver;
	}

	public void setPcfDriver(final BigDecimal pcfDriver) {
		this.pcfDriver = pcfDriver;
	}

	public BigDecimal getPcfLower() {
		return pcfLower;
	}

	public void setPcfLower(final BigDecimal pcfLower) {
		this.pcfLower = pcfLower;
	}

	public BigDecimal getPcfUpper() {
		return pcfUpper;
	}

	public void setPcfUpper(final BigDecimal pcfUpper) {
		this.pcfUpper = pcfUpper;
	}

	public BigDecimal getPcfValue() {
		return pcfValue;
	}

	public void setPcfValue(final BigDecimal pcfValue) {
		this.pcfValue = pcfValue;
	}

	public BigDecimal getPcfSecondOrder() {
		return pcfSecondOrder;
	}

	public void setPcfSecondOrder(final BigDecimal pcfSecondOrder) {
		this.pcfSecondOrder = pcfSecondOrder;
	}

	public BigDecimal getPcfThirdOrder() {
		return pcfThirdOrder;
	}

	public void setPcfThirdOrder(final BigDecimal pcfThirdOrder) {
		this.pcfThirdOrder = pcfThirdOrder;
	}

	public BigDecimal getPcftpm() {
		return pcftpm;
	}

	public void setPcftpm(final BigDecimal pcftpm) {
		this.pcftpm = pcftpm;
	}

	public BigDecimal getPebitdaDriver() {
		return pebitdaDriver;
	}

	public void setPebitdaDriver(final BigDecimal pebitdaDriver) {
		this.pebitdaDriver = pebitdaDriver;
	}

	public BigDecimal getPebitdaLower() {
		return pebitdaLower;
	}

	public void setPebitdaLower(final BigDecimal pebitdaLower) {
		this.pebitdaLower = pebitdaLower;
	}

	public BigDecimal getPebitdaUpper() {
		return pebitdaUpper;
	}

	public void setPebitdaUpper(final BigDecimal pebitdaUpper) {
		this.pebitdaUpper = pebitdaUpper;
	}

	public BigDecimal getPebitdaValue() {
		return pebitdaValue;
	}

	public void setPebitdaValue(final BigDecimal pebitdaValue) {
		this.pebitdaValue = pebitdaValue;
	}

	public BigDecimal getPebitdaSecondOrder() {
		return pebitdaSecondOrder;
	}

	public void setPebitdaSecondOrder(final BigDecimal pebitdaSecondOrder) {
		this.pebitdaSecondOrder = pebitdaSecondOrder;
	}

	public BigDecimal getPebitdaThirdOrder() {
		return pebitdaThirdOrder;
	}

	public void setPebitdaThirdOrder(final BigDecimal pebitdaThirdOrder) {
		this.pebitdaThirdOrder = pebitdaThirdOrder;
	}

	public BigDecimal getPebitdatpm() {
		return pebitdatpm;
	}

	public void setPebitdatpm(final BigDecimal pebitdatpm) {
		this.pebitdatpm = pebitdatpm;
	}

	public BigDecimal getPeDriver() {
		return peDriver;
	}

	public void setPeDriver(final BigDecimal peDriver) {
		this.peDriver = peDriver;
	}

	public BigDecimal getPeLower() {
		return peLower;
	}

	public void setPeLower(final BigDecimal peLower) {
		this.peLower = peLower;
	}

	public BigDecimal getPeUpper() {
		return peUpper;
	}

	public void setPeUpper(final BigDecimal peUpper) {
		this.peUpper = peUpper;
	}

	public BigDecimal getPeValue() {
		return peValue;
	}

	public void setPeValue(final BigDecimal peValue) {
		this.peValue = peValue;
	}

	public BigDecimal getPeSecondOrder() {
		return peSecondOrder;
	}

	public void setPeSecondOrder(final BigDecimal peSecondOrder) {
		this.peSecondOrder = peSecondOrder;
	}

	public BigDecimal getPeThirdOrder() {
		return peThirdOrder;
	}

	public void setPeThirdOrder(final BigDecimal peThirdOrder) {
		this.peThirdOrder = peThirdOrder;
	}

	public BigDecimal getPetpm() {
		return petpm;
	}

	public void setPetpm(final BigDecimal petpm) {
		this.petpm = petpm;
	}

	public BigDecimal getPsDriver() {
		return psDriver;
	}

	public void setPsDriver(final BigDecimal psDriver) {
		this.psDriver = psDriver;
	}

	public BigDecimal getPsLower() {
		return psLower;
	}

	public void setPsLower(final BigDecimal psLower) {
		this.psLower = psLower;
	}

	public BigDecimal getPsUpper() {
		return psUpper;
	}

	public void setPsUpper(final BigDecimal psUpper) {
		this.psUpper = psUpper;
	}

	public BigDecimal getPsValue() {
		return psValue;
	}

	public void setPsValue(final BigDecimal psValue) {
		this.psValue = psValue;
	}

	public BigDecimal getPsSecondOrder() {
		return psSecondOrder;
	}

	public void setPsSecondOrder(final BigDecimal psSecondOrder) {
		this.psSecondOrder = psSecondOrder;
	}

	public BigDecimal getPsThirdOrder() {
		return psThirdOrder;
	}

	public void setPsThirdOrder(final BigDecimal psThirdOrder) {
		this.psThirdOrder = psThirdOrder;
	}

	public BigDecimal getPstpm() {
		return pstpm;
	}

	public void setPstpm(final BigDecimal pstpm) {
		this.pstpm = pstpm;
	}

	public BigDecimal getTriggerLevel() {
		return triggerLevel;
	}

	public void setTriggerLevel(final BigDecimal triggerLevel) {
		this.triggerLevel = triggerLevel;
	}

	public BigDecimal getValuationIndicator() {
		return valuationIndicator;
	}

	public void setValuationIndicator(final BigDecimal valuationIndicator) {
		this.valuationIndicator = valuationIndicator;
	}

	public BigDecimal getValuationIndicator10D() {
		return valuationIndicator10D;
	}

	public void setValuationIndicator10D(final BigDecimal valuationIndicator10D) {
		this.valuationIndicator10D = valuationIndicator10D;
	}

	public BigDecimal getEstimatesFy1() {
		return estimatesFy1;
	}

	public void setEstimatesFy1(final BigDecimal estimatesFy1) {
		this.estimatesFy1 = estimatesFy1;
	}

	public BigDecimal getEstimatesFy2() {
		return estimatesFy2;
	}

	public void setEstimatesFy2(final BigDecimal estimatesFy2) {
		this.estimatesFy2 = estimatesFy2;
	}

	public BigDecimal getDmScoreBookvalue() {
		return dmScoreBookvalue;
	}

	public void setDmScoreBookvalue(final BigDecimal dmScoreBookvalue) {
		this.dmScoreBookvalue = dmScoreBookvalue;
	}

	public BigDecimal getDmScoreEarnings() {
		return dmScoreEarnings;
	}

	public void setDmScoreEarnings(final BigDecimal dmScoreEarnings) {
		this.dmScoreEarnings = dmScoreEarnings;
	}

	public BigDecimal getDmScoreCashflow() {
		return dmScoreCashflow;
	}

	public void setDmScoreCashflow(final BigDecimal dmScoreCashflow) {
		this.dmScoreCashflow = dmScoreCashflow;
	}

	public BigDecimal getDmScoreSales() {
		return dmScoreSales;
	}

	public void setDmScoreSales(final BigDecimal dmScoreSales) {
		this.dmScoreSales = dmScoreSales;
	}

	public BigDecimal getDmScoreEbitda() {
		return dmScoreEbitda;
	}

	public void setDmScoreEbitda(final BigDecimal dmScoreEbitda) {
		this.dmScoreEbitda = dmScoreEbitda;
	}

	public BigDecimal getIntrinsicValueSlope() {
		return intrinsicValueSlope;
	}

	public void setIntrinsicValueSlope(final BigDecimal intrinsicValueSlope) {
		this.intrinsicValueSlope = intrinsicValueSlope;
	}

	public Boolean getIntrinsicValueSlopeSignal() {
		return intrinsicValueSlopeSignal;
	}

	public void setIntrinsicValueSlopeSignal(final Boolean intrinsicValueSlopeSignal) {
		this.intrinsicValueSlopeSignal = intrinsicValueSlopeSignal;
	}

	public BigDecimal getFairValueSlope() {
		return fairValueSlope;
	}

	public void setFairValueSlope(final BigDecimal fairValueSlope) {
		this.fairValueSlope = fairValueSlope;
	}

	public Boolean getFairValueRangeFlag() {
		return fairValueRangeFlag;
	}

	public void setFairValueRangeFlag(final Boolean fairValueRangeFlag) {
		this.fairValueRangeFlag = fairValueRangeFlag;
	}

	public BigDecimal getIntrinsicValueRsq() {
		return intrinsicValueRsq;
	}

	public void setIntrinsicValueRsq(final BigDecimal intrinsicValueRsq) {
		this.intrinsicValueRsq = intrinsicValueRsq;
	}

	public Boolean getCviFvFlag() {
		return cviFvFlag;
	}

	public void setCviFvFlag(final Boolean cviFvFlag) {
		this.cviFvFlag = cviFvFlag;
	}

	public Boolean getCviIvFlag() {
		return cviIvFlag;
	}

	public void setCviIvFlag(final Boolean cviIvFlag) {
		this.cviIvFlag = cviIvFlag;
	}

	public Boolean getCviBuySignal() {
		return cviBuySignal;
	}

	public void setCviBuySignal(final Boolean cviBuySignal) {
		this.cviBuySignal = cviBuySignal;
	}

	public Boolean getCviCloseSignal() {
		return cviCloseSignal;
	}

	public void setCviCloseSignal(final Boolean cviCloseSignal) {
		this.cviCloseSignal = cviCloseSignal;
	}

	public Boolean getCviShortSignal() {
		return cviShortSignal;
	}

	public void setCviShortSignal(final Boolean cviShortSignal) {
		this.cviShortSignal = cviShortSignal;
	}

	public Boolean getCviCoverSignal() {
		return cviCoverSignal;
	}

	public void setCviCoverSignal(final Boolean cviCoverSignal) {
		this.cviCoverSignal = cviCoverSignal;
	}

	public Integer getCviBuyCount() {
		return cviBuyCount;
	}

	public void setCviBuyCount(final Integer cviBuyCount) {
		this.cviBuyCount = cviBuyCount;
	}

	public Integer getCviCloseCount() {
		return cviCloseCount;
	}

	public void setCviCloseCount(final Integer cviCloseCount) {
		this.cviCloseCount = cviCloseCount;
	}

	public Integer getCviShortCount() {
		return cviShortCount;
	}

	public void setCviShortCount(final Integer cviShortCount) {
		this.cviShortCount = cviShortCount;
	}

	public Integer getCviCoverCount() {
		return cviCoverCount;
	}

	public void setCviCoverCount(final Integer cviCoverCount) {
		this.cviCoverCount = cviCoverCount;
	}

	public Boolean getFractionalBuy() {
		return fractionalBuy;
	}

	public void setFractionalBuy(final Boolean fractionalBuy) {
		this.fractionalBuy = fractionalBuy;
	}

	public Boolean getFractionalSell() {
		return fractionalSell;
	}

	public void setFractionalSell(final Boolean fractionalSell) {
		this.fractionalSell = fractionalSell;
	}

	public BigDecimal getCviRangeUpside() {
		return cviRangeUpside;
	}

	public void setCviRangeUpside(final BigDecimal cviRangeUpside) {
		this.cviRangeUpside = cviRangeUpside;
	}

	public BigDecimal getCviRangeDownside() {
		return cviRangeDownside;
	}

	public void setCviRangeDownside(final BigDecimal cviRangeDownside) {
		this.cviRangeDownside = cviRangeDownside;
	}

	public BigDecimal getCvi() {
		return cvi;
	}

	public void setCvi(final BigDecimal cvi) {
		this.cvi = cvi;
	}

	public BigDecimal getApolloAlpha() {
		return apolloAlpha;
	}

	public void setApolloAlpha(final BigDecimal apolloAlpha) {
		this.apolloAlpha = apolloAlpha;
	}

	public BigDecimal getStockIndexBeta() {
		return stockIndexBeta;
	}

	public void setStockIndexBeta(final BigDecimal stockIndexBeta) {
		this.stockIndexBeta = stockIndexBeta;
	}

	public BigDecimal getRangeExp20dPlus() {
		return rangeExp20dPlus;
	}

	public void setRangeExp20dPlus(final BigDecimal rangeExp20dPlus) {
		this.rangeExp20dPlus = rangeExp20dPlus;
	}

	public BigDecimal getRangeExp20dMinus() {
		return rangeExp20dMinus;
	}

	public void setRangeExp20dMinus(final BigDecimal rangeExp20dMinus) {
		this.rangeExp20dMinus = rangeExp20dMinus;
	}

	public BigDecimal getLast20dPerformance() {
		return last20dPerformance;
	}

	public void setLast20dPerformance(final BigDecimal last20dPerformance) {
		this.last20dPerformance = last20dPerformance;
	}

	public BigDecimal getFairValueProjection() {
		return fairValueProjection;
	}

	public void setFairValueProjection(final BigDecimal fairValueProjection) {
		this.fairValueProjection = fairValueProjection;
	}

	public BigDecimal getIntrinsicValueProjection() {
		return intrinsicValueProjection;
	}

	public void setIntrinsicValueProjection(final BigDecimal intrinsicValueProjection) {
		this.intrinsicValueProjection = intrinsicValueProjection;
	}

	public BigDecimal getNewTarget() {
		return newTarget;
	}

	public void setNewTarget(final BigDecimal newTarget) {
		this.newTarget = newTarget;
	}

	public BigDecimal getNewTargetReturn() {
		return newTargetReturn;
	}

	public void setNewTargetReturn(final BigDecimal newTargetReturn) {
		this.newTargetReturn = newTargetReturn;
	}

	public BigDecimal getConditionalDirectionForecast() {
		return conditionalDirectionForecast;
	}

	public void setConditionalDirectionForecast(final BigDecimal conditionalDirectionForecast) {
		this.conditionalDirectionForecast = conditionalDirectionForecast;
	}

	public BigDecimal getMoveToFairValueProjection() {
		return moveToFairValueProjection;
	}

	public void setMoveToFairValueProjection(final BigDecimal moveToFairValueProjection) {
		this.moveToFairValueProjection = moveToFairValueProjection;
	}

	public BigDecimal getMoveToIntrinsicValueProjection() {
		return moveToIntrinsicValueProjection;
	}

	public void setMoveToIntrinsicValueProjection(final BigDecimal moveToIntrinsicValueProjection) {
		this.moveToIntrinsicValueProjection = moveToIntrinsicValueProjection;
	}

	@Column(name = "fair_value_range_limits")
	public Boolean getFairValueRangeLimits() {
		return fairValueRangeLimits;
	}

	public void setFairValueRangeLimits(final Boolean fairValueRangeLimits) {
		this.fairValueRangeLimits = fairValueRangeLimits;
	}

	public BigDecimal getGreenIvProjection() {
		return greenIvProjection;
	}

	public void setGreenIvProjection(final BigDecimal greenIvProjection) {
		this.greenIvProjection = greenIvProjection;
	}

	public BigDecimal getGreenCvi() {
		return greenCvi;
	}

	public void setGreenCvi(final BigDecimal greenCvi) {
		this.greenCvi = greenCvi;
	}

	public BigDecimal getGreenFvProjection() {
		return greenFvProjection;
	}

	public void setGreenFvProjection(final BigDecimal greenFvProjection) {
		this.greenFvProjection = greenFvProjection;
	}

	public BigDecimal getGreenForecastReturn() {
		return greenForecastReturn;
	}

	public void setGreenForecastReturn(final BigDecimal greenForecastReturn) {
		this.greenForecastReturn = greenForecastReturn;
	}

	public BigDecimal getGreenAlphaBeta() {
		return greenAlphaBeta;
	}

	public void setGreenAlphaBeta(final BigDecimal greenAlphaBeta) {
		this.greenAlphaBeta = greenAlphaBeta;
	}

	public BigDecimal getGreenIvSlope() {
		return greenIvSlope;
	}

	public void setGreenIvSlope(final BigDecimal greenIvSlope) {
		this.greenIvSlope = greenIvSlope;
	}

	public BigDecimal getGreenMomentum() {
		return greenMomentum;
	}

	public void setGreenMomentum(final BigDecimal greenMomentum) {
		this.greenMomentum = greenMomentum;
	}

	public BigDecimal getGreenExtremeFilter() {
		return greenExtremeFilter;
	}

	public void setGreenExtremeFilter(final BigDecimal greenExtremeFilter) {
		this.greenExtremeFilter = greenExtremeFilter;
	}

	public BigDecimal getGreenRangeLimit() {
		return greenRangeLimit;
	}

	public void setGreenRangeLimit(final BigDecimal greenRangeLimit) {
		this.greenRangeLimit = greenRangeLimit;
	}

	public BigDecimal getGreenIvPctScore() {
		return greenIvPctScore;
	}

	public void setGreenIvPctScore(final BigDecimal greenIvPctScore) {
		this.greenIvPctScore = greenIvPctScore;
	}

	public BigDecimal getGreenVolatilityScore() {
		return greenVolatilityScore;
	}

	public void setGreenVolatilityScore(final BigDecimal greenVolatilityScore) {
		this.greenVolatilityScore = greenVolatilityScore;
	}

	public BigDecimal getRedIvProjection() {
		return redIvProjection;
	}

	public void setRedIvProjection(final BigDecimal redIvProjection) {
		this.redIvProjection = redIvProjection;
	}

	public BigDecimal getRedCvi() {
		return redCvi;
	}

	public void setRedCvi(final BigDecimal redCvi) {
		this.redCvi = redCvi;
	}

	public BigDecimal getRedFvProjection() {
		return redFvProjection;
	}

	public void setRedFvProjection(final BigDecimal redFvProjection) {
		this.redFvProjection = redFvProjection;
	}

	public BigDecimal getRedForecastReturn() {
		return redForecastReturn;
	}

	public void setRedForecastReturn(final BigDecimal redForecastReturn) {
		this.redForecastReturn = redForecastReturn;
	}

	public BigDecimal getRedAlphaBeta() {
		return redAlphaBeta;
	}

	public void setRedAlphaBeta(final BigDecimal redAlphaBeta) {
		this.redAlphaBeta = redAlphaBeta;
	}

	public BigDecimal getRedIvSlope() {
		return redIvSlope;
	}

	public void setRedIvSlope(final BigDecimal redIvSlope) {
		this.redIvSlope = redIvSlope;
	}

	public BigDecimal getRedMomentum() {
		return redMomentum;
	}

	public void setRedMomentum(final BigDecimal redMomentum) {
		this.redMomentum = redMomentum;
	}

	public BigDecimal getRedExtremeFilter() {
		return redExtremeFilter;
	}

	public void setRedExtremeFilter(final BigDecimal redExtremeFilter) {
		this.redExtremeFilter = redExtremeFilter;
	}

	public BigDecimal getRedRangeLimit() {
		return redRangeLimit;
	}

	public void setRedRangeLimit(final BigDecimal redRangeLimit) {
		this.redRangeLimit = redRangeLimit;
	}

	public BigDecimal getRedIvPctScore() {
		return redIvPctScore;
	}

	public void setRedIvPctScore(final BigDecimal redIvPctScore) {
		this.redIvPctScore = redIvPctScore;
	}

	public BigDecimal getRedVolatilityScore() {
		return redVolatilityScore;
	}

	public void setRedVolatilityScore(final BigDecimal redVolatilityScore) {
		this.redVolatilityScore = redVolatilityScore;
	}
	
	public BigDecimal getPriceChange1m() {
		return priceChange1m;
	}

	public void setPriceChange1m(BigDecimal priceChange1m) {
		this.priceChange1m = priceChange1m;
	}

	public BigDecimal getDiscountPremiumToFairValue() {
		return discountPremiumToFairValue;
	}

	public void setDiscountPremiumToFairValue(BigDecimal discountPremiumToFairValue) {
		this.discountPremiumToFairValue = discountPremiumToFairValue;
	}

	public BigDecimal getNetDiscountMedianFairValue() {
		return netDiscountMedianFairValue;
	}

	public void setNetDiscountMedianFairValue(BigDecimal netDiscountMedianFairValue) {
		this.netDiscountMedianFairValue = netDiscountMedianFairValue;
	}

	public BigDecimal getFairValueChange1m() {
		return fairValueChange1m;
	}

	public void setFairValueChange1m(BigDecimal fairValueChange1m) {
		this.fairValueChange1m = fairValueChange1m;
	}

	public BigDecimal getExpectedReturn2m() {
		return expectedReturn2m;
	}

	public void setExpectedReturn2m(BigDecimal expectedReturn2m) {
		this.expectedReturn2m = expectedReturn2m;
	}

	public BigDecimal getDiscountPremiumToIntrinsicValue() {
		return discountPremiumToIntrinsicValue;
	}

	public void setDiscountPremiumToIntrinsicValue(BigDecimal discountPremiumToIntrinsicValue) {
		this.discountPremiumToIntrinsicValue = discountPremiumToIntrinsicValue;
	}

	public BigDecimal getIntrinsicValueChange3m() {
		return intrinsicValueChange3m;
	}

	public void setIntrinsicValueChange3m(BigDecimal intrinsicValueChange3m) {
		this.intrinsicValueChange3m = intrinsicValueChange3m;
	}

	public BigDecimal getFairValueChange3m() {
		return fairValueChange3m;
	}

	public void setFairValueChange3m(BigDecimal fairValueChange3m) {
		this.fairValueChange3m = fairValueChange3m;
	}

	public BigDecimal getIntrinsicValueChange1m() {
		return intrinsicValueChange1m;
	}

	public void setIntrinsicValueChange1m(BigDecimal intrinsicValueChange1m) {
		this.intrinsicValueChange1m = intrinsicValueChange1m;
	}

	public BigDecimal getPctInFairValueRange() {
		return pctInFairValueRange;
	}

	public void setPctInFairValueRange(BigDecimal pctInFairValueRange) {
		this.pctInFairValueRange = pctInFairValueRange;
	}

	public Long getStockId() {
		return stockId;
	}

	public void setStockId(Long stockId) {
		this.stockId = stockId;
	}

	public Date getStampDate() {
		return stampDate;
	}

	public void setStampDate(Date stampDate) {
		this.stampDate = stampDate;
	}

	@Transient
	// Calculated fields for Daily Connector
	public String calcRiskComment() {
		if (getRisk().doubleValue() < 0) {
			return "Risk averse";
		} else {
			return "Risk assuming";
		}
	}

	@Transient
	public String calcSentimentComment() {
		if (getSentiment().doubleValue() < 0) {
			return "Negative";
		} else {
			return "Positive";
		}
	}

	@Transient
	// IF([Skew]>0.5,"Positive",IF([Skew]<-0.5, "Negative","Neutral"))
	public String calcSkewComment() {
		if (getSkew().doubleValue() > 0.5) {
			return "Positive";
		} else if (getSkew().doubleValue() < -0.5) {
			return "Negative";
		} else {
			return "Neutral";
		}
	}

	@Override
	public boolean equals(final Object obj) {
		if (obj == null)
			return false;
		if (this == obj)
			return true;
		if (obj instanceof LibraStockIndicator) {
			final LibraStockIndicator that = (LibraStockIndicator) obj;
			if (null == this.fairValue && null == that.getFairValue() && null == this.cmci && null == that.getCmci()
					&& null == this.getStampDate() && null == that.getStampDate())
				return true;
			if ((null == this.fairValue && null != that.getFairValue()) || null == this.cmci && null != that.getCmci())
				return false;
			if ((null != this.fairValue && null == that.getFairValue()) || null != this.cmci && null == that.getCmci())
				return false;

			if (this.getStampDate().equals(that.getStampDate()) && this.fairValue.equals(that.getFairValue())
					&& this.cmci.equals(that.getCmci()))
				return true;
		}
		return false;
	}

	@Override
	public int hashCode() {
		int hashCode = 31;
		hashCode = (hashCode * 11) + (this.fairValue == null ? 0 : this.fairValue.hashCode());
		hashCode = (hashCode * 11) + (this.cmci == null ? 0 : this.cmci.hashCode());
		hashCode = (hashCode * 11) + (this.getStampDate() == null ? 0 : this.getStampDate().hashCode());
		return hashCode;
	}

	@Override
	public String toString() {
		return "LibraStockIndicators [libraStock=" + stockId + ", target20D=" + target20D + ", target2M=" + target2M
				+ ", fairValue=" + fairValue + ", discountToFairValue=" + discountToFairValue
				+ ", medianDiscountToFairValue=" + medianDiscountToFairValue + ", fairValueUpper=" + fairValueUpper
				+ ", fairValueMiddle=" + fairValueMiddle + ", fairValueLower=" + fairValueLower + ", revisions="
				+ revisions + ", revisions1M=" + revisions1M + ", revisions3M=" + revisions3M + ", risk=" + risk
				+ ", skew=" + skew + ", starRating=" + starRating + ", flowDriver=" + flowDriver + ", priceDriver="
				+ priceDriver + ", flow=" + flow + ", flowMomentum=" + flowMomentum + ", sentiment=" + sentiment
				+ ", volumeAvg3M=" + volumeAvg3M + ", highPrice52W=" + highPrice52W + ", lowPrice52W=" + lowPrice52W
				+ ", macd1=" + macd1 + ", macd2=" + macd2 + ", macdSignal=" + macdSignal + ", dmiPositive="
				+ dmiPositive + ", dmiNegative=" + dmiNegative + ", cmci=" + cmci + ", williams=" + williams
				+ ", rsi14D=" + rsi14D + ", stochasticsPercentK=" + stochasticsPercentK + ", stochasticsPercentD="
				+ stochasticsPercentD + ", efficiencyRatio=" + efficiencyRatio + ", efficiencyRatioSMA10D="
				+ efficiencyRatioSMA10D + ", oscillator=" + oscillator + ", sma20D=" + sma20D + ", sma50D=" + sma50D
				+ ", sma200D=" + sma200D + ", bollingerUpper=" + bollingerUpper + ", bollingerMiddle=" + bollingerMiddle
				+ ", bollingerLower=" + bollingerLower + ", pctChangeYTD=" + pctChangeYTD + ", macdScore=" + macdScore
				+ ", dmiScore=" + dmiScore + ", cmciScore=" + cmciScore + ", williamsScore=" + williamsScore
				+ ", rsiScore=" + rsiScore + ", stochasticsScore=" + stochasticsScore + ", efficiencyScore="
				+ efficiencyScore + ", oscillatorScore=" + oscillatorScore + ", fireline=" + fireline
				+ ", moneyManager=" + moneyManager + ", adx=" + adx + ", adr=" + adr + ", dayIndex=" + dayIndex
				+ ", dynamicWeighting=" + dynamicWeighting + ", dynamicLongShort=" + dynamicLongShort + ", volumeScore="
				+ volumeScore + ", flowScore=" + flowScore + ", flowMomentumScore=" + flowMomentumScore
				+ ", valueIndicatorScore=" + valueIndicatorScore + ", dfvScore=" + dfvScore + ", flowDriverScore="
				+ flowDriverScore + ", peMaximum=" + peMaximum + ", peMinimum=" + peMinimum + ", pcFMaximum="
				+ pcFMaximum + ", pcFMinimum=" + pcFMinimum + ", pbMaximum=" + pbMaximum + ", pbMinimum=" + pbMinimum
				+ ", psMaximum=" + psMaximum + ", psMinimum=" + psMinimum + ", pebitdaMaximum=" + pebitdaMaximum
				+ ", pebitdaMinimum=" + pebitdaMinimum + ", roeMaximum=" + roeMaximum + ", roeMinimum=" + roeMinimum
				+ ", epsFY1PctChange1D=" + epsFY1PctChange1D + ", epsFY1PctChange5D=" + epsFY1PctChange5D
				+ ", epsFY1PctChange1M=" + epsFY1PctChange1M + ", epsFY1PctChange3M=" + epsFY1PctChange3M
				+ ", lowerMarginOfSafetyLevel=" + lowerMarginOfSafetyLevel + ", upperMarginOfSafetyLevel="
				+ upperMarginOfSafetyLevel + ", dynamicShortWeighting=" + dynamicShortWeighting + ", fib023=" + fib023
				+ ", fib038=" + fib038 + ", fib050=" + fib050 + ", fib061=" + fib061 + ", fib076=" + fib076
				+ ", dailyAlpha8W=" + dailyAlpha8W + ", dailyAlpha3W=" + dailyAlpha3W + ", dailyAlpha1W=" + dailyAlpha1W
				+ ", dailyAlpha1D=" + dailyAlpha1D + ", intrinsicValue=" + intrinsicValue + ", intrinsicValuePct="
				+ intrinsicValuePct + ", intrinsicValueVolatility=" + intrinsicValueVolatility + ", sweetSpot="
				+ sweetSpot + ", valuationTradingFlags=" + valuationTradingFlags + ", target20DReturn="
				+ target20DReturn + ", ptpsTrend=" + ptpsTrend + ", ptpsSAR=" + ptpsSAR + ", ptpsAF=" + ptpsAF
				+ ", baseValue=" + baseValue + ", stretchValue=" + stretchValue + ", mergerValue=" + mergerValue
				+ ", triggerLevel=" + triggerLevel + ", valuationIndicator=" + valuationIndicator
				+ ", valuationIndicator10D=" + valuationIndicator10D + ", longTermPessimistic=" + longTermPessimistic
				+ ", longTermNeutral=" + longTermNeutral + ", longTermOptimistic=" + longTermOptimistic
				+ ", estimatesFy1=" + estimatesFy1 + ", estimatesFy2=" + estimatesFy2 + ", epsTrend=" + epsTrend
				+ ", longTermPBForecast=" + longTermPBForecast + ", longTermPCFForecast=" + longTermPCFForecast
				+ ", longTermPEBITDAForecast=" + longTermPEBITDAForecast + ", longTermPEForecast=" + longTermPEForecast
				+ ", longTermPSForecast=" + longTermPSForecast + ", longTermValue=" + longTermValue + ", pbDriver="
				+ pbDriver + ", pbLower=" + pbLower + ", pbUpper=" + pbUpper + ", pbValue=" + pbValue
				+ ", pbSecondOrder=" + pbSecondOrder + ", pbThirdOrder=" + pbThirdOrder + ", pbtpm=" + pbtpm
				+ ", pcfDriver=" + pcfDriver + ", pcfLower=" + pcfLower + ", pcfUpper=" + pcfUpper + ", pcfValue="
				+ pcfValue + ", pcfSecondOrder=" + pcfSecondOrder + ", pcfThirdOrder=" + pcfThirdOrder + ", pcftpm="
				+ pcftpm + ", pebitdaDriver=" + pebitdaDriver + ", pebitdaLower=" + pebitdaLower + ", pebitdaUpper="
				+ pebitdaUpper + ", pebitdaValue=" + pebitdaValue + ", pebitdaSecondOrder=" + pebitdaSecondOrder
				+ ", pebitdaThirdOrder=" + pebitdaThirdOrder + ", pebitdatpm=" + pebitdatpm + ", peDriver=" + peDriver
				+ ", peLower=" + peLower + ", peUpper=" + peUpper + ", peValue=" + peValue + ", peSecondOrder="
				+ peSecondOrder + ", peThirdOrder=" + peThirdOrder + ", petpm=" + petpm + ", psDriver=" + psDriver
				+ ", psLower=" + psLower + ", psUpper=" + psUpper + ", psValue=" + psValue + ", psSecondOrder="
				+ psSecondOrder + ", psThirdOrder=" + psThirdOrder + ", pstpm=" + pstpm + ", dmScoreBookvalue="
				+ dmScoreBookvalue + ", dmScoreEarnings=" + dmScoreEarnings + ", dmScoreCashflow=" + dmScoreCashflow
				+ ", dmScoreSales=" + dmScoreSales + ", dmScoreEbitda=" + dmScoreEbitda  
				+ ", priceChange1m=" + priceChange1m 
				+ ", discountPremiumToFairValue=" + discountPremiumToFairValue 
				+ ", netDiscountMedianFairValue=" + netDiscountMedianFairValue 
				+ ", fairValueChange1m=" + fairValueChange1m 
				+ ", expectedReturn2m=" + expectedReturn2m 
				+ ", discountPremiumToIntrinsicValue=" + discountPremiumToIntrinsicValue 
				+ ", intrinsicValueChange3m=" + intrinsicValueChange3m 
				+ ", fairValueChange3m=" + fairValueChange3m 
				+ ", intrinsicValueChange1m=" + intrinsicValueChange1m 
				+ ", pctInFairValueRange=" + pctInFairValueRange 
				+ "]";
	}

	/**
	 * In DESC order
	 */
	@Override
	public int compareTo(LibraStockIndicator o) {
		return o.getStampDate().compareTo(this.stampDate);
	}

}
