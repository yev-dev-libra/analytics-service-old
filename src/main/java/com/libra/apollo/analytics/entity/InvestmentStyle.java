package com.libra.apollo.analytics.entity;

import java.util.List;
import java.util.SortedSet;
import java.util.TreeSet;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;

import org.hibernate.annotations.SortComparator;

import com.libra.apollo.analytics.comparator.DefaultInvestmentCriteriaComparator;

import lombok.Data;
import lombok.EqualsAndHashCode;


@SuppressWarnings("serial")
@Entity
@Table(name="investment_style", schema="analytics")
@Data
@EqualsAndHashCode(callSuper=true)
public class InvestmentStyle extends AutoGeneratedId {

	@NotNull
	@Column
	private String code;
	
	@NotNull
	@Column
	private String name;
	
	@NotNull
	@Column
	private String description;
	
	@NotNull
	@Column
	private Priority priority;
	
	@ManyToOne
	private AnalyticsTemplate template;
	
	@ManyToOne(fetch = FetchType.EAGER)
	private InvestmentStyle parent;
	
	@OneToMany(mappedBy = "parent", cascade = CascadeType.ALL)
	private List<InvestmentStyle> children;
	
	@ManyToMany
	@JoinTable(name="investment_style_criteria", schema="analytics",
				joinColumns = {@JoinColumn(name = "investment_style_id")},
				inverseJoinColumns = @JoinColumn(name = "criteria_id", referencedColumnName = "id")
				)
	@SortComparator(DefaultInvestmentCriteriaComparator.class)
	private SortedSet<InvestmentCriteria> criterias = new TreeSet<>();
	
	
}
