package com.libra.apollo.analytics.entity;

import java.util.SortedSet;
import java.util.TreeSet;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.Index;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.hibernate.annotations.SortNatural;

import lombok.Data;
import lombok.EqualsAndHashCode;

@Entity
@Table(name = "apollo_analytics",  
		indexes = {
				@Index(name="type_idx", columnList = "analytics_type"),
				@Index(name="run_type_idx", columnList = "runType"),
		}

		)
@SuppressWarnings("serial")
@Data 
@EqualsAndHashCode(callSuper=true)
public class ApolloAnalytics extends AutoGeneratedId implements Comparable<ApolloAnalytics> {
	
	@Embedded
	private Definition analyticsDefinition;
	
	@Enumerated(EnumType.STRING)
	@Column(name="analytics_type", nullable=false)
	private AnalyticsType type;
	
	@NotNull
	@Enumerated(EnumType.STRING)
	private RunType runType;
	
	@OneToMany(mappedBy="analytics", cascade=CascadeType.ALL, fetch=FetchType.LAZY )
	@SortNatural
	private SortedSet<AnalyticsTemplate> templates = new TreeSet<>();
	
	@OneToMany(mappedBy="analytics", cascade=CascadeType.ALL, fetch=FetchType.LAZY )
	@SortNatural
	private SortedSet<InvestmentStyle> investmentStyles = new TreeSet<>();

	@Override
	public int compareTo(ApolloAnalytics o) {
		return new CompareToBuilder().append(this.getType(), o.getType()).append(this.getAnalyticsDefinition().getName(), o.getAnalyticsDefinition().getName()).toComparison();
	}
	
}
